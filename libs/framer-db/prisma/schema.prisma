// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DB_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

/// Individual User that have signed up.
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  displayName String   @unique
  firstName   String
  lastName    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Teams the user belongs to
  teams               UserTeam[]
  // Teams the user owns relation
  ownedTeams          Team[]        @relation("TeamOwner")
  // Frames the user has created relation
  createdFrames       Frame[]       @relation("FrameCreatedBy")
  // Frames the user has last updated relation
  lastUpdatedFrames   Frame[]       @relation("FrameLastUpdatedBy")
  // Projects the user has last updated relation
  lastUpdatedProjects Project[]     @relation("ProjectLastUpdatedBy")
  // The activities this user has done relation
  ActivityLog         ActivityLog[]
}

/// Team that a user can be a part of
model Team {
  id               String           @id @default(cuid())
  name             String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  /// Depending on the Subscription type, the team will have different limits.
  subscriptionType SubscriptionType
  /// The custom subdomain that the team has for their frames.
  /// "https://{subdomain}.framer.com" is the format.
  /// This is so if an advertiser is linking to a frame, they can have a custom domain that will be shown.
  ///
  /// We should likely lock this to a subscription type.
  customSubDomain  String

  /// Owner of the team
  owner   User   @relation("TeamOwner", fields: [ownerId], references: [id])
  ownerId String

  // Users that are part of the team
  users    UserTeam[]
  // Frames that the team owns
  frames   Frame[]    @relation("FrameOwner")
  Projects Project[]  @relation("ProjectOwner")
}

/// UserTeam is the join table between User and Team
model UserTeam {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  team   Team   @relation(fields: [teamId], references: [id])
  teamId String

  @@id([userId, teamId])
}

/// Projects are the construct of a collection of "frames" to be displayed to an end user.
model Project {
  id          String   @id @default(cuid())
  /// The title of the project to be displayed to the end user.
  title       String
  /// A description of the project
  description String
  /// Any extra notes that the user wants to add to the project.
  notes       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  /// The custom path that the project will be shown at.
  /// If the custom path is "example", then the project will be shown at "https://www.framer.com/example"
  /// All frames will then be shown  at "https://www.framer.com/example/{frame.path}"
  /// If the user has custom subdomain, then it will be shown at "https://{subdomain}.framer.com/{customPath}/{frame.path}"
  customPath String

  /// If a user tries to visit this projects url on something that doesn't support frames, then they will be redirected to this page.
  /// Example should be the full url: "https://www.example.com/unsupported-browser"
  websiteFallbackPage String

  /// ---DO NOT USE YET---
  /// TODO: Just setting it here as a reminder to implement it in the future!
  /// ---DO NOT USE YET---
  unusedWebhooks String

  /// The team that owns this project
  team   Team   @relation("ProjectOwner", fields: [teamId], references: [id])
  teamId String

  lastUpdatedBy   User   @relation("ProjectLastUpdatedBy", fields: [lastUpdatedById], references: [id])
  lastUpdatedById String

  /// The initial frame that will be shown as the root page of the project
  rootFrame   Frame  @relation("ProjectRootFrame", fields: [rootFrameId], references: [id])
  rootFrameId String

  /// The frames that are part of this project
  frames              Frame[]
  ProjectAnalytics    ProjectAnalytics[]
  IntentClickTracking IntentClickTracking[]
}

/// The Frame, or Page, that we are displaying to the end user.
model Frame {
  id          String    @id @default(cuid())
  path        String
  title       String
  /// The image url
  imageUrl    String
  /// Type of image that this will be.
  imageType   ImageType
  /// Should typically only be 1:1 or 1.91:1 as these are the most common aspect ratios.
  aspectRatio String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  /// The user who created the frame
  createdBy       User   @relation("FrameCreatedBy", fields: [createdById], references: [id])
  createdById     String
  /// The team that owns this frame
  team            Team   @relation("FrameOwner", fields: [teamId], references: [id])
  teamId          String
  /// The user who last updated the frame
  lastUpdatedBy   User   @relation("FrameLastUpdatedBy", fields: [lastUpdatedById], references: [id])
  lastUpdatedById String

  /// Intents that are part of this frame
  intents             Intents[]
  /// The project that this frame is part of
  Project             Project               @relation(fields: [projectId], references: [id])
  projectId           String
  /// What project this frame is the root of
  rootFrameOfProjects Project[]             @relation("ProjectRootFrame")
  IntentClickTracking IntentClickTracking[]
}

model Intents {
  id           String     @id @default(cuid())
  type         IntentType
  link         String
  displayText  String
  /// The order in which this intent should be displayed.
  /// Should be between 0 and 6. (I don't think we can have more than 6, have to double check)
  displayOrder Int

  // Frame that this intent is part of
  Frame               Frame                 @relation(fields: [framesId], references: [id])
  framesId            String
  IntentClickTracking IntentClickTracking[]
}

// ================= LOGGING =================

/// ActivityLog records actions performed by users to track usage patterns, debug issues, and to potentially revert changes.
model ActivityLog {
  id          String   @id @default(cuid())
  /// Reference to the user performing the action
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  /// Type of action performed (e.g., login, update)
  action      String
  /// Detailed description of the action
  description String
  /// Time when the action was performed
  timestamp   DateTime @default(now())
}

/// ErrorLog keeps track of application errors and unexpected behavior for debugging and monitoring.
model ErrorLog {
  id         String   @id @default(cuid())
  /// Type of error (e.g., runtime, syntax)
  errorType  String
  /// Error message
  message    String
  /// Optional detailed stack trace for deeper analysis
  stackTrace String?
  /// Time when the error occurred
  timestamp  DateTime @default(now())
}

// =============== ANALYTICS ===============

/// ProjectAnalytics tracks the performance metrics of a project to help users understand how their projects are performing.
model ProjectAnalytics {
  id               String   @id @default(cuid())
  /// Link to the associated project
  projectId        String
  project          Project  @relation(fields: [projectId], references: [id])
  /// Number of times the project was viewed.
  /// We may not be able to track when the "view" technically happens. So for now we consider any _initial_ interaction.
  /// Though let's try to keep it to a single session. How? I'm not sure. TODO!
  views            Int
  /// Number of times any button was clicked for this project.
  clicks           Int
  /// Number of conversions achieved by the project.
  /// We will consider a conversion to be a successful click on any external link for now.
  conversions      Int
  /// Percentage of visitors who navigate away after viewing only one page
  bounceRate       Float
  /// Times websiteFallbackPage was redirect to
  fallbackUrlCount Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

/// A table to store data about the users that have interacted with the project.
model ConsumerKnownData {
  id                     String                @id @default(cuid())
  /// Verified farcaster ID
  farcasterId            String                @unique
  /// Farcaster bio
  farcasterBio           String?
  farcasterDisplayName   String?
  /// Verified addresses of the user fetched from Farcaster
  farcasterVerifications String[]
  /// User's first name
  firstName              String?
  /// User's last name
  lastName               String?
  /// User's email
  email                  String?
  IntentClickTracking    IntentClickTracking[]
}

/// IntentClickTracking records each click on intents by users, including contextual data like time and location.
model IntentClickTracking {
  id         String            @id @default(cuid())
  /// Link to the clicked intent
  intentId   String
  intent     Intents           @relation(fields: [intentId], references: [id])
  /// Link to the frame containing the intent
  frameId    String
  frame      Frame             @relation(fields: [frameId], references: [id])
  /// Link to the project containing the frame
  projectId  String
  project    Project           @relation(fields: [projectId], references: [id])
  /// User who clicked the intent
  consumerId String
  consumer   ConsumerKnownData @relation(fields: [consumerId], references: [id])
  /// Exact time of the click
  clickTime  DateTime          @default(now())
}

// =============== ENUMS ===============

/// The type of image that we are displaying to the end user.
/// This is not considering if its a gif, or png, etc. It is considering whether the images change based on inputs.
enum ImageType {
  /// An image is considered dynamic if it changes depending on inputs.
  Dynamic
  /// An image is static if it does not change, regardless of inputs.
  Static
}

enum IntentType {
  /// Sends a POST request to the current frame, or target frame.
  Post
  /// Links to an external site
  ExternalLink
  /// This links to another frame
  InternalLink
  /// The post_redirect action sends an HTTP POST request to the frame or button post_url.
  /// You can use this action to redirect to a URL based on frame state or user input.
  Redirect
  /// This is related to an Ethereum transaction.
  Transaction
  /// Renders the intent as a text input field.
  TextInput
}

/// The type of subscription that a team can have.
/// Is directly applied to all of the projects of a given team.
enum SubscriptionType {
  /// Free subscription type
  /// Limits - 1 team, 1 project, 5 frames (example)
  Free
  /// Pro subscription type
  /// Limits - 5 teams, 5 projects, 25 frames (example)
  /// Unlock - Custom subdomain, Website URL Fallback etc
  Pro
  /// Enterprise subscription type
  /// Limits - Unlimited teams, projects, and frames
  /// Unlock - Custom subdomain, Website URL Fallback etc
  Enterprise
}
